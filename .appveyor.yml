# SPDX-FileCopyrightText: © 2020-2021 Nicholas Smith <nsmith@ethosgroup.com>
# SPDX-FileCopyrightText:  2021 Peter J. Mello <admin@petermello.net>
#
# SPDX-License-Identifier: Apache-2.0

---
version: '{build}'
max_jobs: 1
# branches:
#   only:
#     - master

environment:
  # Set au version to use or omit to use the latest.
  # Specify branch name to use development version from Github
  au_version:
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Github token to commit pushed packages to repository
  github_user_repo: RogueScholar/chocolatey-packages
  github_api_key:
    # Use <https://ci.appveyor.com/tools/encrypt>
    secure: gK0YgUWaozhwmYe/tsA3gGA/KdZsJRdnbch+UHTlHNQlcciMQIn1vMQ0W6vtLRfm


  # Mail credentials for error notifications
  mail_user:
    # Use <https://ci.appveyor.com/tools/encrypt>
    secure: LtqhVS9TYN1481xemvsgHPyrSdUC8wBbNfPBHWWGqpU=
  mail_pass:
    # Use <https://ci.appveyor.com/tools/encrypt>
    secure: +rVjjRNBO6rMfxOjWdb5LDuptZCqbr7kFqSHl9vevOo=
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true

  # ID of the gist used to save run results, create a gist under the github_user
  # (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: cb46f73c4b1e8e9ff5a6bc0cade5657e

  # Force test: gist id for test results
  gist_id_test:

  # Chocolatey API key - to push updated packages
  api_key:
    # https://ci.appveyor.com/tools/encrypt
    secure: 3Z5hXaa3LHocn8BX5rHyxlK5VzcQbPvCtPElli3plDCCi2hll3nW9LJI3wMIsvIk

init:
  - git config --global user.email "chocolatey@realdimensions.net"
  - git config --global user.name "Chocolatey"
  - git config --global core.safecrlf false

install:
  - ps: >2
      'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture,
      Version | fl Caption, OSArchitecture, Version'
  - ps: $PSVersionTable
  - git --version
  - ps: |2
      git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
      . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

  - ps: >2
      "Build info"

      '  {0,-20} {1}' -f 'SCHEDULED BUILD:',
      ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')

      '  {0,-20} {1}' -f 'FORCED BUILD:',
      ($Env:APPVEYOR_FORCED_BUILD -eq 'true')

      '  {0,-20} {1}' -f 'RE BUILD:', ($Env:APPVEYOR_RE_BUILD -eq 'true')

build_script:
  - ps: >2
      $ErrorActionPreference = 'Continue'

      if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1
      "random $Env:au_test_groups"; return }

      if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and
      ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE) {
          '\[AU (.+?)\]'   { $forced = $Matches[1] }
          '\[PUSH (.+?)\]' { $packages = $Matches[1] -split ' '
          Write-Host "PUSHING PACKAGES: $packages"
          foreach ($package in $packages) {
            Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
            $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} |
      select -First 1 | % Directory
            if (!$package_dir)
      { Write-Warning "Can't find package '$package'"; continue }
          pushd $package_dir; choco pack; Push-Package; popd }
        return } } }

      ./update_all.ps1 -ForcedPackages $forced

      7z a au_temp.zip $Env:TEMP\chocolatey\au\*

artifacts:
  - path: update_info.xml
  - path: Update-AUPackages.md
  - path: au_temp.zip

notifications:
  - provider: Email
    to: $(mail_user)
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true

# on_finish:
#   - ps: >2
#       $blockRdp = $true; iex ((new-object net.webclient).DownloadString(\
#       'https://raw.githubusercontent.com/appveyor/ci/master/scripts/\
#       enable-rdp.ps1'))
...
